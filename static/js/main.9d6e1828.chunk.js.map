{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster_element","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChnage","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,gBAAgBC,GAAhD,4BACvB,mCAAML,EAAMI,gBAAgBE,KAA5B,OACA,kCAAKN,EAAMI,gBAAgBG,MAA3B,WCHKC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAe,OAC/B,cAAC,EAAD,CAAgCA,gBAAiBA,GAArCA,EAAgBC,WCL3BM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAW,SACXa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCgDJG,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAoB,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACT,SAAUkB,S,oBAQ7C,WAEE,IAAMlB,EAAWmB,KAAKN,MAAMb,SACtBU,EAAcS,KAAKN,MAAMH,YAEzBU,EAAmBpB,EAASqB,QAAO,SAAAC,GAAO,OAC9CA,EAAQzB,KAAK0B,cAAcC,SAASd,EAAYe,wBAGlD,OACE,sBAAKjC,UAAU,MAAf,UAEE,mDAEA,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBe,KAAKf,eAGvB,cAAC,EAAD,CAAUJ,SAAWoB,W,GAzCXM,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9d6e1828.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => (\n\n    <div className= 'card-container'>\n        <img alt=\"monsters\" src={`https://robohash.org/${props.monster_element.id}?set=set2&size=180x180`} />\n        <h2> {props.monster_element.name} </h2>\n        <p> {props.monster_element.email} </p>\n    </div>\n\n)","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className = 'card-list'>\n        {props.monsters.map(monster_element => (\n            <Card key= {monster_element.id} monster_element={monster_element} />\n        ))}\n    </div>\n)\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ( {placeholder, handleChnage}) => (\n    <input \n        className= 'search' \n        type='search' \n        placeholder={placeholder} \n        onChange= {handleChnage}\n     />\n\n)","import { Component } from 'react';\n\nimport { CardList } from \"./components/card-list/card-list.component\";\n\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState( {monsters: users}) )\n\n  }\n\n  handleChnage = (e) => {\n    this.setState({ searchField: e.target.value})\n  }\n\n  render() {\n\n    const monsters = this.state.monsters;\n    const searchField = this.state.searchField;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n\n        <h1> Monster Rolodex </h1>\n\n        <SearchBox\n          placeholder = 'search monsters'\n          handleChnage = {this.handleChnage}\n        />\n\n        <CardList monsters ={filteredMonsters} />\n     \n      </div>\n    );\n    \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}